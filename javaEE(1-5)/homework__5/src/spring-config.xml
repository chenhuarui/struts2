<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 配置属性持有对象 -->
    <context:property-placeholder location="classpath:db.properties"/>

    <!-- 配置连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>


    <!--session factory -->
    <!--配置Hibernate的SessionFactory,无hibernate配置文件 -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <!-- 配置数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置hibernate属性-->
        <property name="hibernateProperties">
            <props>
                <!-- 数据库的方言 -->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <!-- 是否显示SQL语句 -->
                <prop key="hibernate.show_sql">false</prop>
                <!-- 是否格式化显示SQL语句 -->
                <prop key="hibernate.format_sql">false</prop>
                <!-- 采用何种策略来创建表结构： -->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
        <!-- 配置映射文件 -->
        <property name="mappingLocations">
            <list>
                <value>classpath:entity/*.hbm.xml</value>
            </list>
        </property>
        <property name="annotatedClasses">
            <list>
                <value>entity.ClazzEntity</value>
                <value>entity.StudentEntity</value>
            </list>
        </property>
    </bean>


    <!--配置Spring 的声明式事物-->
    <!--1.配置事务管理器-->
    <bean id="hibernateTransactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <!--2.配置事物属性，需要事物管理器(配置事务的传播特性)-->
    <tx:advice id="txAdvice" transaction-manager="hibernateTransactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
    <!--3.配置事物切点(切点表达式)，并把切点和事物属性关联起来(哪些类的哪些方法参与事务)-->
    <aop:config>
        <aop:pointcut id="txPointCut" expression="execution(* dao.Impl.*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
    </aop:config>


    <!--dao层-->
    <bean id="operateDao" class="dao.Impl.OperateDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!--service 层-->
    <bean id="classService" class="service.Impl.OperateClassServiceImpl">
        <property name="operateDao" ref="operateDao"/>
    </bean>

    <bean id="studentService" class="service.Impl.OperateStudentServiceImpl">
        <property name="operateDao" ref="operateDao"/>
    </bean>

    <bean id="queryStuInfoService" class="service.Impl.QueryStuInfoServiceImpl">
        <property name="operateDao" ref="operateDao"/>
    </bean>

    <!--Action-->
    <bean id="classAction" class="action.ClassAction" scope="prototype">
        <property name="classService" ref="classService"/>
    </bean>

    <bean id="studentAction" class="action.StudentAction" scope="prototype">
        <property name="studentService" ref="studentService"/>
        <property name="classService" ref="classService"/>
    </bean>

    <bean id="CriteriaQueriesAction" class="action.CriteriaQueriesAction" scope="prototype">
        <property name="queryStuInfoService" ref="queryStuInfoService"/>
        <property name="classService" ref="classService"/>
    </bean>


</beans>